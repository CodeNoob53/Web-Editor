import React from 'react';
import CanvasElement from './CanvasElement';
import './EditorCanvas.css';

const EditorCanvas = ({
  elements,
  selectedElement,
  onSelectElement,
  onUpdateElement,
  showGrid,
  zoom
}) => {
  const rootElements = elements.filter(el => !el.parentId);

  const handleCanvasClick = (e) => {
    // –ö–ª—ñ–∫ –ø–æ –ø—É—Å—Ç–æ–º—É –º—ñ—Å—Ü—é canvas - –∑–Ω—ñ–º–∞—î–º–æ –≤–∏–¥—ñ–ª–µ–Ω–Ω—è
    if (e.target === e.currentTarget || 
        e.target.classList.contains('canvas-content') ||
        e.target.classList.contains('canvas')) {
      onSelectElement(null);
    }
  };

  // –û–±—á–∏—Å–ª—é—î–º–æ —Ä–æ–∑–º—ñ—Ä–∏ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –º–∞—Å—à—Ç–∞–±—É–≤–∞–Ω–Ω—è
  const canvasStyle = {
    transform: `scale(${zoom / 100})`,
    transformOrigin: 'top left',
  };

  return (
    <div className="canvas-wrapper">
      <div className="canvas-toolbar">
        <div className="canvas-info">
          <span>–ü–æ–ª–æ—Ç–Ω–æ</span>
          <span className="element-count">{elements.length} –µ–ª–µ–º–µ–Ω—Ç—ñ–≤</span>
        </div>
        <div className="canvas-info">
          <span>–ú–∞—Å—à—Ç–∞–±: {zoom}%</span>
        </div>
      </div>
      
      <div 
        className={`canvas ${showGrid ? 'show-grid' : ''}`}
        style={canvasStyle}
        onClick={handleCanvasClick}
      >
        <div className="canvas-content">
          {rootElements.length === 0 ? (
            <div className="canvas-placeholder">
              <div className="placeholder-icon">üìê</div>
              <h3>–ü–æ—á–Ω—ñ—Ç—å —Å—Ç–≤–æ—Ä—é–≤–∞—Ç–∏</h3>
              <p>–í–∏–±–µ—Ä—ñ—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —ñ –∫–ª—ñ–∫–Ω—ñ—Ç—å –Ω–∞ –µ–ª–µ–º–µ–Ω—Ç –≤ –ø–∞–Ω–µ–ª—ñ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ñ–≤</p>
            </div>
          ) : (
            <>
              {rootElements.map((element) => (
                <CanvasElement
                  key={element.id}
                  element={element}
                  elements={elements}
                  isSelected={selectedElement === element.id}
                  onSelect={onSelectElement}
                  onUpdate={onUpdateElement}
                  level={0}
                />
              ))}
            </>
          )}
        </div>
      </div>
    </div>
  );
};

export default EditorCanvas;