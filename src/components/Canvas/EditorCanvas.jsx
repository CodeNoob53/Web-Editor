import React from 'react';
import { useDrop } from 'react-dnd';
import CanvasElement from './CanvasElement';
import './EditorCanvas.css';

const EditorCanvas = ({
  elements,
  selectedElement,
  onSelectElement,
  onUpdateElement,
  onAddElement,
  onMoveElement,
  showGrid,
  zoom
}) => {
  const [{ isOver }, drop] = useDrop(() => ({
    accept: ['ELEMENT', 'CANVAS_ELEMENT'],
    drop: (item, monitor) => {
      if (!monitor.didDrop()) {
        if (item.elementType) {
          // –ù–æ–≤–∏–π –µ–ª–µ–º–µ–Ω—Ç –∑ toolbox
          return { parentId: null, index: 0 };
        } else if (item.id) {
          // –ü–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è —ñ—Å–Ω—É—é—á–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞ –Ω–∞ root —Ä—ñ–≤–µ–Ω—å
          const rootElements = elements.filter(el => !el.parentId);
          onMoveElement(item.id, null, rootElements.length);
        }
      }
    },
    collect: (monitor) => ({
      isOver: monitor.isOver({ shallow: true }),
    }),
  }));

  const rootElements = elements.filter(el => !el.parentId);

  const handleCanvasClick = (e) => {
    // –ö–ª—ñ–∫ –ø–æ –ø—É—Å—Ç–æ–º—É –º—ñ—Å—Ü—é canvas - –∑–Ω—ñ–º–∞—î–º–æ –≤–∏–¥—ñ–ª–µ–Ω–Ω—è
    if (e.target === e.currentTarget || 
        e.target.classList.contains('canvas-content') ||
        e.target.classList.contains('canvas')) {
      onSelectElement(null);
    }
  };

  // –û–±—á–∏—Å–ª—é—î–º–æ —Ä–æ–∑–º—ñ—Ä–∏ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –º–∞—Å—à—Ç–∞–±—É–≤–∞–Ω–Ω—è
  const canvasStyle = {
    transform: `scale(${zoom / 100})`,
    transformOrigin: 'top left',
    // –ù–µ –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Ñ—ñ–∫—Å–æ–≤–∞–Ω—ñ —Ä–æ–∑–º—ñ—Ä–∏ - –¥–æ–∑–≤–æ–ª—è—î–º–æ canvas –∞–¥–∞–ø—Ç—É–≤–∞—Ç–∏—Å—è
  };

  return (
    <div className="canvas-wrapper">
      <div className="canvas-toolbar">
        <div className="canvas-info">
          <span>–ü–æ–ª–æ—Ç–Ω–æ</span>
          <span className="element-count">{elements.length} –µ–ª–µ–º–µ–Ω—Ç—ñ–≤</span>
        </div>
        <div className="canvas-info">
          <span>–ú–∞—Å—à—Ç–∞–±: {zoom}%</span>
        </div>
      </div>
      
      <div 
        ref={drop}
        className={`canvas ${showGrid ? 'show-grid' : ''} ${isOver ? 'drag-over' : ''}`}
        style={canvasStyle}
        onClick={handleCanvasClick}
      >
        <div className="canvas-content">
          {rootElements.length === 0 ? (
            <div className="canvas-placeholder">
              <div className="placeholder-icon">üìê</div>
              <h3>–ü–æ—á–Ω—ñ—Ç—å —Å—Ç–≤–æ—Ä—é–≤–∞—Ç–∏</h3>
              <p>–ü–µ—Ä–µ—Ç—è–≥–Ω—ñ—Ç—å –µ–ª–µ–º–µ–Ω—Ç–∏ –∑ –ø–∞–Ω–µ–ª—ñ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ñ–≤ –∞–±–æ –∫–ª—ñ–∫–Ω—ñ—Ç—å –Ω–∞ –Ω–∏—Ö</p>
            </div>
          ) : (
            <>
              {rootElements.map((element, index) => (
                <CanvasElement
                  key={element.id}
                  element={element}
                  elements={elements}
                  isSelected={selectedElement === element.id}
                  onSelect={onSelectElement}
                  onUpdate={onUpdateElement}
                  onAddElement={onAddElement}
                  onMove={onMoveElement}
                  index={index}
                />
              ))}
            </>
          )}
          
          {/* Drop zone indicator –∫–æ–ª–∏ –ø–µ—Ä–µ—Ç—è–≥—É—î–º–æ */}
          {isOver && rootElements.length > 0 && (
            <div style={{
              position: 'absolute',
              bottom: '20px',
              left: '20px',
              right: '20px',
              height: '60px',
              border: '2px dashed #007AFF',
              borderRadius: '8px',
              backgroundColor: 'rgba(0, 122, 255, 0.1)',
              display: 'flex',
              alignItems: 'center',
              justifyContent: 'center',
              color: '#007AFF',
              fontWeight: '500',
              pointerEvents: 'none',
              zIndex: 10
            }}>
              –í—ñ–¥–ø—É—Å—Ç—ñ—Ç—å —Ç—É—Ç —â–æ–± –¥–æ–¥–∞—Ç–∏ –≤ –∫—ñ–Ω–µ—Ü—å
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default EditorCanvas;